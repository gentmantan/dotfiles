# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."qbittorrent" = {
    image = "ghcr.io/qbittorrent/docker-qbittorrent-nox";
    environmentFiles = [ "/config/containers/qbittorrent.env" ];
    volumes = [
      "/config/qbittorrent:/config:rw"
      "/nest0/torrents:/downloads:rw"
    ];
    dependsOn = [
      "wireguard"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:wireguard"
    ];
  };
  systemd.services."podman-qbittorrent" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-qbittorrent-root.target"
    ];
    wantedBy = [
      "podman-compose-qbittorrent-root.target"
    ];
  };
  virtualisation.oci-containers.containers."wireguard" = {
    image = "lscr.io/linuxserver/wireguard";
    environmentFiles = [ "/config/containers/wireguard.env" ];
    volumes = [
      "/config/wireguard:/config:rw"
    ];
    ports = [
      "8089:8089/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--network-alias=wireguard"
      "--network=qbittorrent_default"
      "--sysctl=net.ipv4.conf.all.src_valid_mark=1"
    ];
  };
  systemd.services."podman-wireguard" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-qbittorrent_default.service"
    ];
    requires = [
      "podman-network-qbittorrent_default.service"
    ];
    partOf = [
      "podman-compose-qbittorrent-root.target"
    ];
    wantedBy = [
      "podman-compose-qbittorrent-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-qbittorrent_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f qbittorrent_default";
    };
    script = ''
      podman network inspect qbittorrent_default || podman network create qbittorrent_default
    '';
    partOf = [ "podman-compose-qbittorrent-root.target" ];
    wantedBy = [ "podman-compose-qbittorrent-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-qbittorrent-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
