# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."ai-koboldcpp" = {
    image = "docker.io/koboldai/koboldcpp";
    ports = [
      "127.0.0.1:26653:5001/tcp"
    ];
    labels = {
      "io.containers.autoupdate" = "registry";
    };
    pull = "newer";
    log-driver = "journald";
    environmentFiles = [ "/config/env/koboldcpp.env" ];
    extraOptions = [
      "--network-alias=koboldcpp"
      "--network=ai_default"
      "--device=/dev/dri/renderD128"
    ];
  };
  systemd.services."podman-ai-koboldcpp" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-ai_default.service"
    ];
    requires = [
      "podman-network-ai_default.service"
    ];
    partOf = [
      "podman-compose-ai-root.target"
    ];
    wantedBy = [
      "podman-compose-ai-root.target"
    ];
  };
  virtualisation.oci-containers.containers."ai-sillytavern" = {
    image = "ghcr.io/sillytavern/sillytavern";
    environment = {
      "TZ" = "America/New_York";
    };
    volumes = [
      "/config/sillytavern/config:/home/node/app/config"
      "/config/sillytavern/data:/home/node/app/data"
      "/config/sillytavern/plugins:/home/node/app/plugins"
    ];
    ports = [
      "127.0.0.1:30799:8000/tcp"
    ];
    labels = {
      "io.containers.autoupdate" = "registry";
    };
    pull = "newer";
    log-driver = "journald";
    extraOptions = [
      "--network-alias=sillytavern"
      "--network=ai_default"
    ];
  };
  systemd.services."podman-ai-sillytavern" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-ai_default.service"
    ];
    requires = [
      "podman-network-ai_default.service"
    ];
    partOf = [
      "podman-compose-ai-root.target"
    ];
    wantedBy = [
      "podman-compose-ai-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-ai_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f ai_default";
    };
    script = ''
      podman network inspect ai_default || podman network create ai_default
    '';
    partOf = [ "podman-compose-ai-root.target" ];
    wantedBy = [ "podman-compose-ai-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-ai-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
