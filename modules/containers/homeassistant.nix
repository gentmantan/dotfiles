# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."homeassistant" = {
    image = "ghcr.io/home-assistant/home-assistant:stable";
    volumes = [
      "/config/homeassistant:/config:rw"
      "/etc/localtime:/etc/localtime:ro"
    ];
    ports = [
      "127.0.0.1:26920:8123/tcp"
    ];
    dependsOn = [
      "zwave_js"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_C1300971-if01-port0:/dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_C1300971-if01-port0:rwm"
      "--network-alias=homeassistant"
      "--network=homeassistant_default"
    ];
  };
  systemd.services."podman-homeassistant" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-homeassistant_default.service"
    ];
    requires = [
      "podman-network-homeassistant_default.service"
    ];
    partOf = [
      "podman-compose-homeassistant-root.target"
    ];
    wantedBy = [
      "podman-compose-homeassistant-root.target"
    ];
  };
  virtualisation.oci-containers.containers."zwave_js" = {
    image = "docker.io/zwavejs/zwave-js-ui:latest";
    environment = {
      TRUST_PROXY = "true";
    };
    volumes = [
      "/config/zwave-js:/usr/src/app/store:rw"
    ];
    ports = [
      "127.0.0.1:14509:8091/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_C1300971-if00-port0:/dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_C1300971-if00-port0:rwm"
      "--network-alias=zwave-js"
      "--network=homeassistant_default"
    ];
  };
  systemd.services."podman-zwave_js" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-homeassistant_default.service"
    ];
    requires = [
      "podman-network-homeassistant_default.service"
    ];
    partOf = [
      "podman-compose-homeassistant-root.target"
    ];
    wantedBy = [
      "podman-compose-homeassistant-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-homeassistant_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f homeassistant_default";
    };
    script = ''
      podman network inspect homeassistant_default || podman network create homeassistant_default
    '';
    partOf = [ "podman-compose-homeassistant-root.target" ];
    wantedBy = [ "podman-compose-homeassistant-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-homeassistant-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
